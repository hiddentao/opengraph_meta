<?php
// $Id$

require_once('opengraph_meta.common.inc');


define('OPENGRAPH_META_MENU_ADMIN','admin/content/opengraph_meta');
define('OPENGRAPH_META_MENU_ADMIN_SETTINGS',OPENGRAPH_META_MENU_ADMIN.'/settings');



/**
 * Implements hook_perm().
 */
function opengraph_meta_perm() {
  return array(OPENGRAPH_META_PERM_ADMIN, OPENGRAPH_META_PERM_EDIT);
}


/**
 * Implementation of hook_menu.
 */
function opengraph_meta_menu() {
  $admin_access = array(OPENGRAPH_META_PERM_ADMIN);

  $items[OPENGRAPH_META_MENU_ADMIN] = array(
    'title' => 'Open Graph meta tags',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opengraph_meta_settings_form'),
    'description' => 'Configure meta tags for Facebook sharing.',
    'access arguments' => $admin_access,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'opengraph_meta.admin.inc',
  );
  $items[OPENGRAPH_META_MENU_ADMIN_SETTINGS] = array(
    'title' => 'Settings',
    'access arguments' => $admin_access,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'opengraph_meta.admin.inc',
  );

  return $items;
}


/**
 * Implementation of hook_form_alter.
 */
function opengraph_meta_form_alter(&$form, $form_state, $form_id) {
  // if editing a node
  if ('node_form' == stristr($form_id, 'node_form')) {

    $node = $form['#node'];
    // check that tags are enabled for this node type and that user has permission to edit them
    if (!OpenGraphMeta::instance()->tags_are_enabled_for_content_type($node->type) || !user_access(OPENGRAPH_META_PERM_EDIT))
      return;

    // add meta tags editing for making it easier to share on Facebook
    $form['opengraph_meta'] = array(
      '#type' => 'fieldset',
      '#title' => t('Open Graph meta tags (e.g. for Facebook sharing)'),
      '#description' => t('Here you can specify the exact title and summary text for this node as it will appear when shared on e.g. Facebook'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 100,
      OpenGraphMeta::TITLE => array(
        '#title' => t('Title'),
        '#type' => 'textfield',
        '#maxlength' => 255,
        '#default_value' => !empty($node->opengraph_meta) ? $node->opengraph_meta[OpenGraphMeta::TITLE] : '',
        '#description' => t('The title of the node. If left blank then the node title will be used).'),
      ),
      OpenGraphMeta::DESCRIPTION => array(
        '#title' => t('Summary'),
        '#type' => 'textarea',
        '#default_value' => !empty($node->opengraph_meta) ? $node->opengraph_meta[OpenGraphMeta::DESCRIPTION] : '',
        '#description' => t('The summary of the node. If left blank then the first 200 characters of the node body text will be used.'),
      ),
      OpenGraphMeta::TYPE => array(
        '#title' => t('Type'),
        '#type' => 'select',
        '#options' => OpenGraphMeta::instance()->get_all_og_types_for_select_field(),
        '#default_value' => !empty($node->opengraph_meta) ? $node->opengraph_meta[OpenGraphMeta::TYPE] : '',
        '#description' => t('The type of the node. if left unset then the value set for the %type content type will be used: "@setting"',array('%type' => $node->type, '@setting' => variable_get(OPENGRAPH_META_VAR_CONTENT_TYPE_.$node->type, ''))),
      ),
    );

    // Location stuff
    $form['opengraph_meta']['location'] = array(
      '#type' => 'fieldset',
      '#title' => t('Open Graph Location tags'),
      '#description' => t('Here you can specify the location information.'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 100,
    );
    $fields = array(
      OpenGraphMeta::LATITUDE => array('Latitude', 'Geographical latitude as a decimal number.'),
      OpenGraphMeta::LONGITUDE => array('Longitude', 'Geographical longitude as a decimal number.'),
      OpenGraphMeta::STREET_ADDRESS => array('Street address', 'Local street address.'),
      OpenGraphMeta::LOCALITY => array('Locality', 'E.g. town or city.'),
      OpenGraphMeta::REGION => array('Region', 'Region within country, e.g. a county.'),
      OpenGraphMeta::POST_CODE => array('Post code', 'Postal code.'),
      OpenGraphMeta::COUNTRY_NAME => array('Country', 'Full country name.'),
    );
    foreach ($fields as $f => $i) {
      $form['opengraph_meta']['location'][$f] = array(
        '#title' => t($i[0]),
        '#type' => 'textfield',
        '#maxlength' => 255,
        '#default_value' => !empty($node->opengraph_meta) ? $node->opengraph_meta[$f] : '',
        '#description' => t($i[1]),
      );
    }

    // Contact stuff
    $form['opengraph_meta']['contact'] = array(
      '#type' => 'fieldset',
      '#title' => t('Open Graph Contact tags'),
      '#description' => t('Here you can specify the contact information.'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 100,
    );
    $fields = array(
      OpenGraphMeta::EMAIL => array('Email', ''),
      OpenGraphMeta::PHONE_NUMBER => array('Phone number', ''),
      OpenGraphMeta::FAX_NUMBER => array('Fax number', ''),
    );
    foreach ($fields as $f => $i) {
      $form['opengraph_meta']['contact'][$f] = array(
        '#title' => t($i[0]),
        '#type' => 'textfield',
        '#maxlength' => 255,
        '#default_value' => !empty($node->opengraph_meta) ? $node->opengraph_meta[$f] : '',
        '#description' => t($i[1]),
      );
    }

    // if we have images in this node then show thumbnail selector
    $image_paths = OpenGraphMeta::instance()->harvest_images_from_node($node);
    if (!empty($image_paths)) {
      $image_selector_options = array();
      foreach ($image_paths as $path) {
        $abs_path = url($path);
        $image_selector_options[$path] = "<img src=\"$abs_path\" alt=\"$path\" title=\"$path\" width=\"32px\" height=\"32px\" />";
      }
      $form['opengraph_meta'][OpenGraphMeta::IMAGE] = array(
        '#title' => t('Thumbnail image'),
        '#type' => 'radios',
        '#default_value' => !empty($node->opengraph_meta) ? $node->opengraph_meta[OpenGraphMeta::IMAGE] : '',
        '#description' => t('The thumbnail image that will get shown in e.g. a Facebook preview. If left unset then then the first available image will be used.'),
        '#options' => $image_selector_options,
      );
    }
  }
}



/**
 * Implements hook_nodeapi().
 */
function opengraph_meta_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'delete':
      OpenGraphMeta::instance()->delete_node_data($node->nid);
      break;
    case 'insert':
    case 'update':
      if (!empty($node->opengraph_meta)) {
        OpenGraphMeta::instance()->save_node_data($node->nid, $node->opengraph_meta);
      }
      break;
    case 'load':
      if (OpenGraphMeta::instance()->tags_are_enabled_for_content_type($node->type)) {
        return array('opengraph_meta' => OpenGraphMeta::instance()->load_node_data($node));
      }
      break;
    case 'view':
      // only show meta tags if viewing full node as a page
      if (NODE_BUILD_NORMAL == $node->build_mode && !$teaser && $page && !empty($node->opengraph_meta))
        OpenGraphMeta::instance()->render_data($node, $node->opengraph_meta);
  }
}




